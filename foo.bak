{-# LANGUAGE OverloadedStrings #-}
module Lib ( someFunc) where 
-- import qualified Data.Text (Text())
import qualified Data.Text as T
import qualified Data.Text.Lazy.IO as T

import Lucid (toHtml, body_, charset_, meta_, head_, renderText, doctypehtml_)
-- import Lucid.Html5
import Graphics.Plotly.Histogram (histogram)
import Graphics.Plotly.Lucid (plotlyCDN)
import Graphics.Plotly (aes, bars, orientation, Orientation(Vertical,Horizontal))
import Graphics.Plotly.Simple (hbarChart, fanPlot)
import Graphics.Plotly(Barmode(Stack,Group), barmode)
import Data.Aeson (toJSON)
-- import Data.Text (Text)
import Data.Aeson
import Lens.Micro ((.~), (&), (?~))
import Lens.Micro 
-- import Graphics.Plotly (plotly, line, aes, x, y, hbars, z, Trace())
import Graphics.Plotly.Base

import qualified Data.Text.Lazy.IO as I
import qualified Data.Aeson.Text (encodeToLazyText)

data RankSummary = RankSummary { rankValue :: T.Text
                 , readCount :: Int
                 , rank :: Rank
                 , n50   :: Double
                 , contigCount :: Int
                 , assemblyLength :: Int
                 , speciesCount :: Int
                 , staxids :: [T.Text]
                 , qseqid :: T.Text }
data Rank = Species | Genus

someFunc :: IO ()
someFunc = main
main = do
    putStrLn "hi!"
    T.writeFile "blue." "red!"
    T.writeFile "mygroup.html" $ renderText $ doctypehtml_ $ do
    head_ $ do meta_ [charset_ "utf-8"]
               plotlyCDN
   -- body_ $ toHtml $  plotly "myDiv" [myTrace, myTrace2] 
    let traces = [subPlot bars taxon sampY "Sample" summs & marker ?~ (defMarker & opacity ?~ 0.2)
                , subPlot bars taxon contY "Control" summs]
    let plot' =  traces & layout . barmode ?~ Group
    body_ $ toHtml $  plotly "myDiv" 
       [subPlot bars taxon sampY "Sample" summs & marker ?~ (defMarker & opacity ?~ 0.2)
      , subPlot bars taxon contY "Control" summs]
          & layout . barmode ?~ Group
           -- & layout . xaxis2 ?~ (defAxis & zeroline ?~ True)
           -- & layout . xaxis2 ?~ (defAxis & tickvals ?~ fmap toJSON ( [1.0, 2.0, 3.0] :: [Double]))
--           & layout . xaxis ?~ (defAxis 
--               & tickvals ?~ fmap toJSON ( [1.0, 2.0, 3.0] :: [Double])
--               & range ?~ (0, 33))
  -- body_ $ toHtml $ plotly "myDiv" [hbarsTrace]

pointsData :: [(Double, Double)]
pointsData = zip [1,2,3,4] [500,3000,700,200]


hbarData :: [(T.Text, Double, Double)]
hbarData = [("Simon", 14.5, 63), ("Joe", 18.9, 9), ("Dorothy", 16.2, 2)]
-- any extractor will work after .~; it needs to return a json value.

data Summary = Summary { sampY :: Double, contY :: Double, taxon :: T.Text }

summs = [Summary 1 10 "giraffe", Summary 3 10 "elefant", Summary 5 32 "baz"]
fst' (a,_,_) = a
snd' (_,b,_) = b
thd' (_,_,c) = c


-- subPlot :: (Functor f, ToJSON j)  => (a -> j) -> (a -> j) -> T.Text -> f a
subPlot typ fx fy label vs = 
         typ  & x ?~ fmap (toJSON . fx) vs
              & y ?~ fmap (toJSON . fy) vs
              & name ?~ label
              & orientation ?~ Vertical
myTrace2 :: Trace
myTrace2
  = bars     & x ?~ fmap (toJSON . taxon) summs
             & y ?~ fmap (toJSON . sampY) summs
             & name ?~ "Sample"
             & orientation ?~ Vertical

myTrace :: Trace
myTrace
  = bars     & x ?~ fmap (toJSON . taxon) summs
             & y ?~ fmap (toJSON . contY) summs
             & name ?~ "Control"
             & orientation ?~ Vertical

--              & layout . margin ?~ thinMargins
--              & layout . height ?~ 300
--
-- myTrace :: Trace
-- myTrace = hbars (aes  & x .~ fst' 
--                       & y .~ snd')
--                -- & z .~ thd' )
--               hbarData
--      & orientation ?~ Vertical
hbarData' :: [(T.Text, Double)]
hbarData' = [("Simon", 14.5), ("Joe", 18.9), ("Dorothy", 16.2)]

-- hbarsTrace :: Trace

-- hbarsTrace = bars & y ?~ map fst hbarData'
--                   & x ?~ map snd hbarData'
--                   & orientation ?~ Horizontal
-- 
--  = hbars (aes  & x .~ fst' 
--                & y .~ snd')
--                -- & z .~ thd' )
--               hbarData
--      & orientation ?~ Vertical
--      & z ?~ map (toJSON . thd') hbarData



-- works, but hbars ignores the z values
--  = hbars (aes  & x .~ fst' 
--                & y .~ snd')
--                -- & z .~ thd' )
--               hbarData
--      & orientation ?~ Vertical
--      & z ?~ map (toJSON . thd') hbarData
--


      -- & barmode ?~ Stack
--    & layout . margin ?~ thinMargins
--    & layout . height ?~ 300
           -- & orientation ?~ Vertical
--  = hbars  (aes & x .~ fst
--            & y .~ snd
--            & orientation ?~ Vertical) pointsData

--hbarsTrace :: Trace
--hbarData :: [(T.Text, Double)]
--hbarData = [("Simon", 14.5), ("Joe", 18.9), ("Dorothy", 16.2)]
--hbarsTrace = bars & y ?~ map fst hbarData
--                  & x ?~ map snd hbarData
--                  & orientation ?~ Horizontal

